24 장 프로젝트 시작.
프로젝트 이름 정하기

-백엔드 끝나있고, 프론트 작성

1. 회원가입 로그인기능

실습진행순서

- { 1 } 작업 환경 준비하기 ------------------------------------------------------------------------
24.1 CRA blog-frontend 디렉터리 
24.1.1 Prettier, Jsconfig.json
24.1.2 yarn add react-router-dom@^5.3.0

( 1 ) 라우트 컴포넌트
- LoginPage.js : 로그인
- RegisterPage.js : 회원가입
- WritePage.js : 글쓰기
- PostPage.js : 포스트 읽기
- PostListPage.js : 포스트 목록 

작업순서
[1]라우트 컴포넌트를 정의
[2] index.js 에서 Browser Router로 App.js 감싸주기
[3] App.js 에서 라우트 경로지정.

App.js ==
PostListPage 에서 여러 경로를 사용할 예정
' /@: ' username 파라미터로 읽기 위함.

( 2 ) 24.1.3 스타일설정 
yarn add styled-components

작업순서
[1] 색상 팔레트 만들기 lib/styles/palette.js
open-color 라이브러리 에서 추출.
[2] Button 컴포넌트 만들기 components/common/Button.js
Button 컴포넌트 안에 StyledButton 다시 렌더링 한 이유?
-> 추후 컴포넌트 사용시 자동 import 되게하려고.
[3] 렌더링하기 pages/PostListPage.js
[4] 버튼 스타일 만들기. index.css

( 3 ) 24.1.5 리덕스 적용
yarn add redux react-redux redux-actions immer redux-devtools-extension

[1] 리듀서 틀잡기 src/modules/auth.js
[2] 루트 리듀서 만들기 src/modules/index.js
[3] 최상위 index.js 에서 Provider, store 적용

- { 2 } 회원인증 UI 구현 ------------------------------------------------------------------------
UI 구현 / 리덕스 상태관리 / API 요청  

작업순서
[1] 회원가입 또는 로그인 폼 components/auth/AuthForm.js 
[2] 회원가입 / 로그인 페이지의 레이아웃 components/auth/AuthTemplate.js 
- https://snippet-generator.app 에 코드 복사해보기 ( 보기편하게 코드 줄여주는 기능 )
사용해보기
children 렌더링하기 
[3] pages/LoginPage.js, RegisterPage.js 만들고 위 두개 컴포넌트 불러와서 렌더링.
[4] ***AuthTemplate.js 컴포넌트 children 받아온 내용 보여주는거 완성하기. 스타일작성.
[5] ***AuthForm 완성하기 css, Form 작성.
어떠한 엘리먼트에 특별한 용도가 있거나 이름을 따로 만들어 줄때
JSX 의 가독성이 좋아진다면, styled-components 를 통해 
컴포넌트에 새로운 이름을 만들어 줄것.
그러나 딱히 중요한 역할을 맡고있지 않다면 CSS Selector 활용.
type props 에 따라 다른내용 보여주기. 

[6] LoginPage와 RegisterPage 에도 type 넣어주기.

- ( 3 ) 회원 인증 리덕스 연동 ---------------------------------------------------------------

[1] 리덕스로 폼 상태 관리 modules/auth.js
immer 라이브러리 사용, 
회원가입 관련된 state
액션 : changeField, initializeForm
초기상태 : ''
리듀서 : 	- changeField : payload { form, key, value }
	- initializeForm : paylod { form }

[2] 컨테이너 컴포넌트 만들기 ( 이벤트 핸들러 ) containers/auth/LoginForm.js
useDispatch 와 useSelector 함수 사용해 리덕스와 연동시킴.
( connect 함수 대신 Hooks 사용. )

[3] LoginPage 안에 기존 AuthForm 을 LoginForm 으로 대체 .

[4] 컨테이너에서 날린 props 사용하기. AuthForm.js

[5] LoginFrom 컴포넌트를 RegisterFrom 으로 이름을 바꾸고, 키워드도전부 Register 로 변경.

[6] RegisterPage.js , RegisterForm.js 로 모두 변경.

[7] API 연동 하기위한 사전작업
yarn add axios redux-saga
api 는 기능별로 파일을 나눠서 관리할 예정 ( src/lib/api )
- axios 인스턴스 생성 src/lib/api/client.js
프록시 설정 

[8] ***API 함수 작성 lib/api/auth.js

[9] API 요청 상태관리 modules/loading.js -- 로딩상태관리 
redux-saga 를 통해 API 를 요청할수 있도록 loading 리덕스 모듈과 createRequestSaga 유틸함수
설정.

[10]***회원가입 구현 containers/auth/RegisterForm.js
localhost:3000/register 회원가입 페이지에서 회원가입 시도해보기.
개발자 도구 콘솔 확인.

[11]***로그인 상태  modules/user.js , index.js, containers/auth/RegisterForm.js
작성후 회원가입 시도. 회원가입 성공후에 리덕스 개발자도구 열어서 user 상태가 값이 잘들어오나 확인

[12]***회원가입 성공시 홈화면 이동기능 containers/auth/RegisterForm.js
작성후 확인 해보기.

[13]***로그인 기능 구현 containers/auth/LoginForm.js
작성후 회원가입한 계정으로 로그인 해보기.

[14]***회원 인증 에러 처리하기. (로그인 실패시) components/auth/AuthForm.js
작성후 에러를 발생시켜 보기.

-4) 헤더 컴포넌트 만들기 ------------------------------------------------------------------------------------

[1] ***반응형 디자인을 위한 컴포넌트 components/common/Responsive.js

[2] **헤더 컴포넌트 만들기 components/common/Header.js

-5) 로그인 유지 및 로그아웃 --------------------------------------------------------------------------

[1] 로그인 상태 보여주기 containers/common/HeaderContainer.js

[2] 로그인 상태 유지하기 containers/auth/LoginForm.js, RegisterForm.js, 최상위index.js

[3] 로그인 검증 실패시 정보 초기화 modules/user.js
테스트 해보기 ( 쿠키 초기화 )

[4] 로그아웃 기능 구현 lib/api/auth.js, modules/user.js
onLogout 만들기 HeaderContainer.js, common/Header.js


2. 글쓰기 기능
- lib : Quill, WYSIWYG

글쓰기 페이지 기능을 구현할 차례.
글쓰기 관련된 컴포넌트 들은 write 라는 이름으로 분류.

- { 1 } 에디터 UI 구현하기 ------------------------------------
	[1] 글쓰기 에디터 : quill 라이브러리 사용하여 구현.
		> yarn add quill
	
	[2] 제목과 내용을 입력할수 있는 Editor 컴포넌트 만들기.
		> components/write/Editor.js
		외부 라이브러리와 연동시 useRef 와 useEffect 적절히 사용.
		
	[3] Editor 컴포넌트 WritePage 에 렌더링.
		> pages/WritePage.js
		
- { 2 } 에디터 하단 UI 구현하기 ------------------------------------
	[1] TagBox 만들기 
		> components/write/TagBox.js
		
	[2]	TagBox 컴포넌트 WritePage 에 렌더링.
		> pages/WritePage.js
		
	[3] TagBox 에 Hooks 이용해 태그 추가제거 기능 구현 
		> components/write/TagBox.js
		
	[4] WriteActionButtons 만들기 
		> components/write/WriteActionButtons.js 
		
	[5] WriteActionButtons 컴포넌트 WritePage 에 렌더링.
		> pages/WritePage.js

- { 3 } 리덕스로 글쓰기 상태 관리하기 ------------------------------------
	[1] write 리덕스 모듈 작성하기
		> modules/write.js 
	
	[2] 루트 리듀서에 포함시키기 
		> modules/index.js

	[3] EditorContainer 만들기 
		> containers/write/EditorContainer.js 
	
	[4] WritePage 에 EditorContainer 렌더링.
		> pages/WritePage.js 
		
	[5] Editor 컴포넌트 수정. 
		> components/write/Editor.js 
		
	[6] TagBoxContainer 만들기 
		> containers/write/TagBoxContainer.js 
		
	[7] WritePage 에 TagBoxContainer 렌더링.
		> pages/WritePage.js 
	
	[8] TagBox 컴포넌트 수정. props 로 전달받은것 사용하기
		> components/write/TagBox.js 
	
- { 4 } API 연동하기 ------------------------------------
	[1] 포스트에 관련된 API 를 요청하는 함수 작성하기
		> lib/api/posts.js 
	
	[2] 위 함수를 호출하는 리덕스 액션과 사가 준비.
		> modules/write.js 
		
	[3] 포스트 작성, 취소 기능, 등의 컨테이너 컴포넌트 작성.
		> containers/write/WriteActionButtonsContainer.js
		
	[4] WritePage 에서 WriteActionButtonsContainer 렌더링.
		> pages/WritePage.js 
	
3. 블로그 포스트 목록 보여주는 기능, 포스트 읽는 기능

등록한 포스트를 조회할 수 있는 기능을 구현. 포스트를 조회하는 기능은 두가지.
첫번째는 포스트 하나를 읽는 포스트 읽기 기능,
두번째는 여러 포스트를 조회하는 포스트 목록 기능.

- { 1 } 포스트 읽기 UI 준비하기 ------------------------------------
	[1] 서버에서 데이터 받아오기전 PostViewer UI 준비하기 
		> components/post/PostViewer.js 
		
	[2] 해당 컴포넌트를 PostPage 에서 HeaderContainer 와 함께 렌더링.
		> pages/PostPage.js 
	
- { 2 } 포스트 읽기 API 연동하기 ------------------------------------
	[1] API를 연동해 실제 데이터를 보여주도록 수정하기. readPost 함수 만들기.
		> lib/api/posts.js
		
	[2] post 리덕스 모듈 작성하기.
		> modules/post.js 
		
	[3] 루트 리듀서 및 루트 사가 등록하기.
		> modules/index.js 
	
	[4] PostViewer 를 위한 컨테이너 만들기.
		> containers/post/PostViewerContainer.js 
		
	[5] PostPage 에서 PostViewerContainer 렌더링.
		> pages/PostPage.js 
		
	[6] PostViewer 에 받을 props 받아서 적용시키기.
		> components/post/PostViewer.js 
		
- { 3 } 포스트 목록 UI 준비하기 ------------------------------------
	[1]	여러개의 포스트를 보여주는 PostList UI 구현. 포스트들을 배열로 받아와서 렌더링.
		사용자가 로그인 중이라면 페이지 상단 우측에 새 글 작성하기 버튼 보여줌.
		> components/posts/PostList.js 
	
	[2] Subinfo 와 Tags 컴포넌트 common 디렉터리에 분리 시키기.
		분리 시킬때 계정명이 나타나는 부분과 각 태그가 나타나는 부분에 Link 사용해서
		클릭시 이동할 주소 설정.
		> components/common/Subinfo.js 
		> components/common/Tags.js 
		
	[3] PostList 에 두 컴포넌트 적용시키기
		> components/posts/PostList.js 
		
	[4] PostListPage 에 위 컴포넌트 렌더링 시키기.
		> pages/PostListPage.js 
		
	[5] PostViewer 에 분리시킨 Subinfo 와 Tags 적용시키기.
	
- { 4 } 포스트 목록 API 연동하기 ------------------------------------
	[1] PostList 컴포넌트 에서 list API 를 사용할수 있게 도와주는 qs 라이브러리 설치.
		쿼리값을 더 편리하게 생성하고 JSON 으로 변환할수 있다.
		> yarn add qs

	[2] api 받아오는 파일에 qs 라이브러리 적용하기.
		listPosts API 를 호출시 파라미터로 값을 넣어주면
		주소를 만들어서 호출해줌.
		> lib/api/posts.js
		
	[3] 위 요청의 상태를 관리하는 리덕스 모듈을 만들자.
		> modules/posts.js 
		
	[4] 루트 리듀서와 루트 사가 등록.
		> modules/index.js
		
	[5] 주소에 있는 쿼리 파라미터를 추출해 우리가 만든 listpots API 호출.
		> containers/posts/PostListContainer.js
		
	[6] PostListPage 에서 PostListContainer 렌더링.
		> pages/PostListPage.js
		
	[7] PostList 에서 받아온 props 사용하기.
		> components/posts/PostList.js 
		
- { 5 } HTML 필터링하기 ------------------------------------
	[1] sanitize-html 라이브러리 사용해서 필터링하기
		단순히 HTML 제거 기능 뿐만 아니라 특정 HTML 만 허용하는 기능도 있다.
		그래서 글쓰기 API 에서 사용하면 악성 스크립트 삽입 막을수 있음.
		> yarn add sanitize-html
		
	[2] 백엔드 프로젝트의 posts.ctrl.js 수정.
		포스트 리스팅 할때 글자수 제한 기능이 있기 때문에 완성된 HTML 이 아닌 
		일부분만 전달되서 HTML 태그를 없애는 작업이 잘 안될수도 있음.
		
	[3] import sanitizeHtml from 'sanitize-html'; 추가.
		> api/posts/posts.ctrl.js - 최상단 
		
	[4] 포스트 목록 조회하는 list API 수정. removeHtmlAndShorten 함수 만들기.
		> api/posts/posts.ctrl.js - list
		
	[5] 포스트를 작성하고 수정할땐 특정 태그만 허용. sanitizeOptions 사용.
		> api/posts/posts.ctrl.js - 상단에 작성.
		
	[6] write API 와 update API 에 적용.
		> api/posts/posts.ctrl.js - write, update
		
	[7] 페이지 새로고침후 포스트맨으로 필터링 실험해보기.
		{
			"title": "스크립트",
			"body": "<p>안녕하세요 <b>리액트</b> </p> <script>alert('hello world!')</script>",
			"tags": ["스크립트트"]
		}
		
- { 6 } 페이지네이션 구현하기 ------------------------------------
	[1] list API 만들때 마지막 페이지 번호를 HTTP 헤더를 통해 전달했던것을
		createRequestSaga 를 통해 받아오기.
		액션 안에 meta 값을 response 로 넣어줌.
		> lib/createRequestSaga.js 
	
	[2] posts 리덕스 모듈 수정.
		리덕스 스토어 안에 마지막 페이지 번호를 담아 둘수 있음.
		> modules/posts.js 

	[3] 페이지네이션을 위한 컴포넌트 작성.
		props 로 현재 계정명, 태그, 현재 페이지, 마지막 페이지 가져옴.
		사용자가 이 컴포넌트에 있는 버튼 클릭시 props 로 받아온값을 사용해
		이동할 다음경로 설정. 또한 첫 페이지 일경우 '이전' 버튼 비활성화되고 
		마지막 페이지일땐 '다음' 버튼 비활성화.
		> components/posts/Pagination.js 
	
	[4] Button 컴포넌트에 비활성화 스타일 설정.
		> components/common/Button.js 
		
	[5] Pagination 컴포넌트 컨테이너 만들기. 
		> containers/posts/PaginationContainer.js 
		
	[6] PostListPage 에서 위 컨테이너 렌더링.
		> pages/PostListPage.js 
		
	