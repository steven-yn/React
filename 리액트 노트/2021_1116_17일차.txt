
4. 포스트 수정 및 삭제 기능.

포스트를 수정하는 기능과 포스트륵 삭제하는 기능을 구현하고, 프로젝트 마무리.

- { 1 } 포스트 수정기능 구현하기 ------------------------------------

포스트를 읽는 화면에서 포스트 작성자만 포스트 상단에 수정 버튼과 삭제 버튼이 나타나도록
렌더링 해보자. 이번에 만들 버튼은 기존에 만들어서 사용하던 Button 과 스타일이 다르므로,
기존의 Button 컴포넌트 를 재사용 하지는 않겠다.
	[1] 수정/삭제 버튼 UI 만들기.
		> components/post/PostActionButtons.js

	[2] PostViewer 에서 직접 렌더링하게되면, props 를 전달할때 PostViewer 를
		거쳐서 여러번 전달하게되면 props 관리가 어려워 지므로, props 를 JSX 형태로
		받아와서 렌더링 한다. 
		
		PostViewer 컴포넌트 수정. props 를 PostViewer 함수에서 전달받아 
		JSX 형태로 렌더링.
		> components/post/PostViewer.js 
		
	[3] PostViewerContainer 에서 PostActionButtons 를 불러온 후
		PostViewer 의 actionButtons props 를 통해 렌더링.
		> containers/post/PostViewerContainer.js 
		
	[4] 수정 버튼 클릭시 글쓰기 페이지로 이동하고, 현재 보고 있는 포스트가 나타나도록
		하기. write 리덕스 모듈에 SET_ORIGINAL_POST 액션을 만듬.
		이 액션은 현재 보고있는 포스트 정보를 write 모듈에서 관리하는 상태로 넣음.
		> modules/write.js 
		
	[5] 액션 추가후 PostViewerContainer 에서 자신의 포스트 일때만 수정/삭제 가
		나타나도록 설정. onEdit 함수를 구현해서 PostActionButtons 에 전달.
		> containers/post/PostViewerContainer
		
	[6] 수정 버튼이 클릭되면 props 로 전달받은 onEdit 을 호출하도록 
		PostActionButtons 수정.
		> components/post/PostActionButtons.js 
		
	[7] 내용의 초기값도 설정되도록 Editor 컴포넌트 수정. 
		Editor 컴포넌트 에서 받아오는 body 값은 Quill 에디터에서 내용을
		입력할때마다 변경됨. 그렇게 변경 될때마다 방금 작성한 useEffect 에 
		등록한 함수가 호출됨. 하지만 우리는 단한번만 실행시켜야함.
		따라서 useRef 사용해 mount 상태에 따라 작업을 처리하도록 설정.
		useEffect 의 두번째 파라미터에 빈 배열 넣어도 해결은 되지만,
		ESLint 규칙상 useEffect 에서 사용하는 모든 외부 값을 
		두번째 파라미터에 넣는 배열안에 포함시킬것을 권장하므로 이렇게 처리.
		아니면 해당줄만 ESLint 규칙 비활성화 해도됨.
		> components/write/Editor.js 
		
	[8] write 상태에 originalPostId 값이 주어진다면 포스트 작성 API 대신
		수정 API 를 사용하는 기능 구현. updatePost 함수 작성.
		patch method 사용.
		> lib/api/posts.js 
	
	[9] 그후 write 리덕스 모듈에서 UPDATE_POST 액션과 updatePostSaga 만들기.
		> modules/write.js 
		
	[10] 컨테이너와 UI 컴포넌트 두개 수정. 
	
		originalPostId 값이 존재하면 writePost 대신 updatePost 액션 생성함수 
		사용하도록 수정. idEdit 전달하여 originalPostId 값의 존재 유무에 따라 전달.
		
		> containers/post/WriteActionButtonContainer.js 
		
		idEdit 전달받아서 버튼 이름을 포스트 수정 또는 포스트 등록으로 설정. 
		> components/write/WriteActionButton.js 
		
- { 2 } 포스트 삭제기능 구현하기 ------------------------------------
	[1] 사용자에게 한번더 삭제 확인요청을 하기 위한 모달 컴포넌트 만듬.
		모달 컴포넌트를 포스트 읽기 페이지만 사용하지만, 컴포넌트 재사용성 고려해서 
		common 디렉터리에 생성. UI 컴포넌트 구현.
		> components/common/AskModal.js 
		
	[2] AskModal 기반으로 post 디렉터리에 AskRemoveModal 컴포넌트 만들기.
		모달을 사용하는 곳에 AskModal 을 직접 렌더링해도 상관없지만,
		이렇게 모달별로 파일을 만들어 주면 나중에 모달의 개수가 많아졌을때 
		관리하기가 매우 편해진다.
		> components/post/AskRemoveModal.js 

	[3] 위 컴포넌트 들을 PostActionButtons 내부에서 사용. 
		되는지 테스트 해보기.
		> components/post/post/PostActionButtons.js 
		
	[4] onRemove 를 구현하기 앞서 removePost 함수 구현.
		delete API 가져오기.
		> lib/api/posts.js 
		
	[5] PostViewer 에서 onRemove 함수를 만들어 removePost 를 호출하도록 구현.
		API 요청후 따로 보여줄 결과가 없으니 리덕스 액션과 사가를 만드는 작업을 생략,
		바로 API 사용.
		> containers/post/PostViewerContainer.js 
		
- { 3 } react-helmet-async 로 meta 설정하기 ------------------------------------
	[1] 브라우저 상단에 React App 이라는 제목이 나옴.
		이 meta 태그를 리액트 앱에서 설정하는 방법 알아보기.
		> yarn add react-helmet-async
		
	[2] 최상위 index.js 파일에서 App 을 HelmetProvider 로 감싸기.
		> src/index.js 
		
	[3] meta 태그를 설정하고 싶은곳에 Helmet 컴포넌트 사용.
		> src/App.js 
	
	[4] 더 깊숙히 위치한 Helmet 이 우선권 차지.
		이를 이용해 글 작성하기 메타 태그 설정하기.
		> pages/WritePage.js 
		
	[5] PostViewer 컴포넌트 에서 Helmet 을 사용해 포스트의 제목이 
		페이지 제목이 되도록 설정하기.
		> components/post/PostViewer.js 
		
- { 4 } 프로젝트 마무리하기 ------------------------------------

	[1] 프로젝트 완성뒤 어떤 작업 하는가?
		우선 백엔드 서버를 통해 리액트 앱 제공할수 있도록 빌드.
		> yarn build
		
	[2] 서버를 통해 blog-frontend/build 디렉터리 안의 파일을 사용할수 있도록
		koa-static 을 사용해 정적파일 제공기능 구현. 
		> yarn add koa-static
		
	[3] main.js 수정하기.
		> src/main.js 
		
	[4] koa-static 을 사용해 blog-frontend/build 디렉터리에 있는 파일들을 
		서버를 통해 조회할수 있게 해줬다. 
		추가로 send 라는 함수 사용하는 미들웨어는 클라이언트 기반 라우팅이 
		제대로 작동하게 해줌. 
		HTTP 상태가 404 이고 주소가 /api 로 시작하지 않으면,
		index.html 의 내용을 응답.
		이 미들웨어 미적용시 주소창에 페이지 직접 입력해서 들어갈 경우
		페이지가 제대로 나타나지 않고 Not Found 가 나타남.
		
- 프로젝트 끝

서버 호스팅 (AWS)


		