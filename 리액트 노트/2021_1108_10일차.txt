
18.3.2 redux-saga

redux-saga 를 통해 비동기 작업 관리 방법 알아보자.
이 미들웨어 는 redux-thunk 다음으로 많이 사용하는 비동기 미들웨어.
redux-thunk 는 함수형태의 액션을 디스패치 하여 미들웨어에서 해당 함수에
스토어의 dispatch 와 getState 를 파라미터로 넣어서 사용하는 원리.

그래서 구현한 thunk 함수 내부에서 원하는 API 요청도 하고,
다른 액션을 디스패치 하거나 현재 상태를 조회하기도 했다.
대부분의 경우 이전 절에서 배운 redux-thunk 로도 충분히 기능을 구현.

redux-saga 는 좀더 까다로운 상황에서 유용.
예를들면,
- 기존요청을 취소처리 해야할때 (불필요한 중복요청 방지)
- 특정 액션이 발생 했을때 다른 액션을 발생 시키거나
API 요청 등 리덕스와 관계없는 코드 실행시
- 웹 소켓 사용할때
- API 요청 실패시 재요청 해야할때

18.3.2.1 제너레이터 함수 이해하기
redux-saga 에서는 ES6의 제너레이터(generator) 함수라는 문법 사용.
보통 일반적인 상황에서는 많이 사용하지 않기 때문에 초반에 진입장벽 있음.
우선 제너레이터 함수 문법 알아보자.
이 문법의 핵심 기능은 함수를 작성할때 함수를 특정 구간에 멈춰놓거나,
원할때 다시 돌아가게 할수도 있다.

제너레이터 함수 사용시 함수에서 값을 순차적으로 반환 할수있다.
심지어 함수의 흐름을 도중에 멈춰 놓았다가 다시 이어서 진행가능.

제너레이터가 처음 만들어지면 함수의 흐름은 멈춰있는 상태다.
next() 가 호출되면 다음 yield 까지 호출하고 다시 멈춘다.
제너레이터 함수를 사용하면 함수를 도중에 멈출수도 있고,
순차적으로 여러 값을 반환시킬수도 있다.
next 함수에 파라미터를 넣으면 제너레이터 함수에서 yield 를 사용해
해당값을 조회할수도 있다.

redux-saga 는 제너레이터 함수 문법을 기반으로 비동기 작업 관리해줌.
좀더 이해하기 쉽게 설명하면, redux-saga 는 우리가 디스패치 하는 액션을
모니터링 해서 그에따라 필요한 작업을 따로 수행할수 있는 미들웨어다.

제너레이터 함수의 작동방식만 기본적으로 파악하고 있으면,
redux-saga 에서 제공하는 여러 유용한 유틸 함수를 사용하여 액션을
쉽게 처리할수 있다.

18.3.2.2 비동기 카운터 만들기

기존에 thunk 함수로 구현했던 비동기 카운터를 이번에는 redux-saga
를 사용해서 구현해보자.

yarn add redux-saga

그리고 counter 리덕스 모듈을 열어 기존 thunk 함수를 제거하고,
INCREMENT_ASYNC 와 DECREMENT_ASYNC 라는 액션타입 선언.
해당 액션에 대한 액션생성함수 도 만들고, 이어서 제너레이터 함수를 만듬.
이 제너레이터 함수를 사가(saga) 라고 부른다.

module index.js 에 루트 사가를 만들어줌.

스토어에 미들웨어 적용하기.

CounterContainer 컴포넌트 를 App 컴포넌트에 렌더링.
counter 리덕스 모듈이 변경되긴 했지만, 컨테이너 컴포넌트 에서 수정할것이 없다.
기존에 사용중이던 thunk 함수와 똑같은 이름으로 액션생성함수 를 만들었기 때문.

yarn add redux-devtools-extension

리덕스 개발자 도구 적용하기.

이 라이브러리 의 composeWithDevTools 함수를 리덕스 미들웨어 와 함께
사용할땐 그냥 applyMiddleware 부분 감싸주면 됨.

+1 버튼을 두번 누르면 INCREASE_ASYNC 액션이 두번 디스패치 되고,
이에 따라 INCREASE 액션도 두번 디스패치.
takeEvery 사용했기 때문. 디스패치 되는 모든 INCREASE_ASYNC 액션에대해
1초후 INCREASE 액션 발생시킴.

-1 버튼을 두번 누르면 DECREASE_ASYNC 액션 두번 디스패치 했음에도
DECREASE 액션은 단 한번 디스패치 됨.
takeLatest 사용했기 때문. 여러 액션이 중첩되어 디스패치 될땐
기존의 것들은 무시하고 가장 마지막 액션만 제데로 처리.

18.3.2.3 API 요청상태 관리

이번엔 redux-saga 사용해 API 요청 해보자.
기존에 thunk 로 관리하던 액션생성함수 를 없애고, 사가를 사용하여 처리.

sample 리덕스 모듈 수정.

여기서 GET_POST 액션의 경우엔 API 요청시 어떤 id로 조회할지 정해줌.
redux-saga 사용시 id처럼 요청에 필요한 값을 액션의 payload 로 넣어줌.

액션을 처리하기 위한 사가를 작성할때 payload 값을 API 를 호출하는
함수의 인수로 넣어주어야 한다.

API 호출해야하는 상황엔 사가 내부에서 직접 호출하지 않고 call 함수를 사용.
call 함수의 경우, 첫번쨰 인수는 호출할 함수, 그뒤 인수는 그 함수에
넣어주고 싶은 값.
현재는 id를 의미하는 action.payload 가 인수.

사가를 작성하여 구현 과정에서 redux-thunk 사용처럼 반복되는 코드 나옴.
충분히 간소화 할수 있는 코드.

18.3.2.4 리팩토링

이제 반복되는 코드를 따로 함수화하여 리팩토링.
이전에 thunk 함수를 위해 createRequestThunk 함수 만든것 처럼
createRequestSaga 라는 함수 만들기.

18.3.2.5 알아 두면 유용한 기능들

이번에는 redux-saga 가 제공하는 기능중 알아두면 유용한 몇가지 기능 배워보기.
먼저 사가 내부에서 현재상태 조회하는 방법.

만약 사가 내부에서 현재 상태를 참조해야하는 상황이 생기면 이렇게 select 사용.

다음은 사가가 실행되는 주기를 제한하는 방법.
takeEvery 대신 throttle 이라는 함수 사용시
사가가 n초에 단한번만 호출되도록 설정할수 있다.

redux-saga 는 이책에서 다룬 기능외에도 여러기능 제공.
비동기 작업 처리하면서 겪을수 있는 다양한 상황에 맞춰 개발할수 있음.
조금 복잡한 상황 접했다면 redux-saga 매뉴얼 참고.

18.4 정리 
이 장에서는 리덕스 미들웨어 사용방법 알아보고, 비동기 작업 미들웨어로
어떻게 처리할수 있는지 배웠다.
비동기 작업 처리할때 redux-thunk 는 일반 함수로 이뤄져 있기 때문에
간단명료하다는 장점이 있고, redux-saga 는 진입 장벽이 조금 있을수 있으나
복잡한 상황에서 더욱 효율적으로 작업 관리 하는 장점이 있다.

앞으로 비동기 작업시 이 둘을 사용하거나 혹은 redux-promise-middleware
redux-pender, redux-observable 등 이 책에서 다루지 않은 다른 미들웨어
시도해 보아도 좋다.

아니면 미들웨어 사용하지 않고 그냥 컴포넌트 단에서 API 요청하는것도
틀린 방법은 아니다. 비동기 작업 처리시 리덕스 미들웨어 사용하는 이유는
결국 좀더 편하게 처리하기 위해서임.
그러므로 오히려 불편하다고 느껴지면 사용하지 않는편이 나음.
