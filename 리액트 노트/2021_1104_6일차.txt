13.3 Route 하나에 여러개의 path 설정하기

Route 하나에 여러개 path 지정 하는것은 최신 버전 v5 부터 적용된 기능.

13.4 URL 파라미터와 쿼리

페이지 주소 정의할때 가끔 유동적인 값을 전달해야 할 때도 있다.
이는 파라미터와 쿼리로 나눔.
- 파라미터 예시 : /profile/velopert
- 쿼리 예시 : /about?details=true

유동적인 값을 사용해야 하는 상황에서 파라미터를 쓸지 쿼리를 쓸지 정할 때,
무조건 따라야 하는 규칙은 없다.
다만 일반적으로 파라미터는 특정 아이디 혹은 이름을 사용하여 조회할때 사용,
쿼리는 우리가 어떤 키워드를 검색하거나 페이지에 필요한 옵션 전달시 사용.

13.4.1 URL 파라미터
profile 페이지에서 파라미터 사용하기.
/profile/velopert 같은 형식으로 뒷부분에 유동적인 username 값 넣어줄때
해당 값을 props 로 받아와 조회하는 방법 알아보자.

URL 파라미터를 사용할 땐 라우트로 사용되는 컴포넌트에서 받아오는 match 객체 안의
params 값을 참조. 
match 객체 안에는 현재 컴포넌트가 어떤 경로 규칙에 의해 보이는지 데이터가 들어가있다.

App 컴포넌트에서 Profile 컴포넌트 라우트 정의. 이번 path 규칙에는
/profile/:username 이라고 넣어준다.
이렇게 설정하면 match.params.username 값을 통해 현재 username 값 조회 가능.

라우트 정의후 상단에 각 페이지 이동하는 링크도 추가.

13.4.2 URL 쿼리.

이번에는 About 페이지에서 쿼리 받아오자.
쿼리는 location 객체에 들어있는 search 값에서 조회.
location 객체는 라우트로 사용된 컴포넌트 에게 props 로 전달,
웹 애플리케이션 의 현재 주소에 대한 데이터.

location 의 형태

{
	"pathname" : "/about",
	"search" : "?detail=true",
	"hash" : ""
}

URL 쿼리를 읽을 때는 위 객체가 지닌 값 중에서 search 값 확인하기.
이 값은 문자열 형태다. URL 쿼리는 ?detail=true&another=1 과 같이
문자열에 여러가지 값을 설정해 줄수 있다.
search 값에서 특정 값을 읽어오기 위해서는 이 문자열을 객체 형태로 변환시켜줘야함.

쿼리 문자열을 객체로 변환할때는 qs 라는 라이브러리 사용.
npm 또는 yarn 사용해 라이브러리 설치하기.

쿼리를 사용할 땐 쿼리 문자열을 객체로 파싱하는 과정에서
결과값은 언제나 문자열 이라는 점에 주의.
?value =1 혹은 ?value=true 와 같이 숫자나 boolean 을 사용한다고 해서
해당 값이 우리가 원하는 형태가 아닌, '1', 'true' 와 같이
문자열 형태로 받아진다.

그렇기 때문에 숫자를 받아와야 하면 parseInt 함수를 통해 꼭 숫자로 변환해주고,
지금 처럼 논리 자료값을 사용해야 하는경우 정확히 'true' 문자열 인지 비교하자.

13.5 서브 라우트.

이것은 라우트 내부에 또 라우트를 정의 하는것을 의미.
이 작업은 그렇게 복잡 X. 그냥 라우트로 사용되고 있는 컴포넌트 내부에
Route 컴포넌트 또 사용하는 것 뿐임.

두 종류의 프로필 링크 보여주는것을, 잘라내서 프로필 링크를 보여주는
Profiles 라는 라우트 컴포넌트를 따로 만들고, 
그안에서 Profile 컴포넌트를 서브 라우트로 사용하도록.

이 코드에서 첫번째 Route 컴포넌트 에는 component 대신 render라는
props 넣어 줬다.
컴포넌트 자체 전달이 아닌, 보여주고 싶은 JSX 넣어줄수 있다.
지금처럼 따로 컴포넌트 만들기 애매한 상황에 사용해도 되고,
컴포넌트에 props 별도로 넣어줘도 된다.

JSX 에서 props 설정할때 값을 생략하면 자동으로 true
그냥 exact 라고 적은 것처럼.

컴포넌트를 다 만들었다면 기존의 App 컴포넌트 에 있던 프로필 링크를 지우고,
Profiles 컴포넌트를 /profiles 경로에 연결 및 링크 추가.


13.6 리액트 라우터 부가기능

13.6.1 history

history 객체는 라우트로 사용된 컴포넌트에 match, location과 함께
전달되는 props 중 하나로, history를 통해 컴포넌트 내에 구현하는
메서드 에서 라우터 API 호출할수 있다.

예를 들어 특정 버튼 눌렀을때 뒤로 가거나, 로그인후 화면 전환 하거나,
다른 페이지로 이탈하는것을 방지할 때 history 활용.

13.6.2 withRouter

withRouter 함수는 HoC (Higher-order Component) 입니다.
라우트로 사용된 컴포넌트가 아니어도
match, location, history 객체를 접근할수 있게 해줌.

WithRouterSample 이라는 컴포넌트 만들어서 withRouter 써보자.
withRouter 사용할땐 컴포넌트 내보내 줄 때 함수로 감싸준다.
JSON.stringify 의 두번째 파라미터와 세번째 파라미터를 위와 같이 
null, 2 로 설정해주면 JSON에 들여쓰기가 적용된 상태로 문자열 만들어짐.

Profiles 에 렌더링
 
location과 match 객체의 정보를 확인할수 있음.
match 객체에 params가 비어있다.
withRouter 를 사용하면 현재 자신을 보여주는 라우트 컴포넌트 (Profiles)
를 기준으로 match가 전달된다.
Profiles 를 위한 라우트를 설정할 땐 path="/profiles" 만 입력 했으므로
username 파라미터를 읽어오지 못하는 것이다.

13.6.3 Switch

여러 Route를 감싸서 그중 일치하는 단 하나의 라우트만을 렌더링 시켜줌.
Switch를 사용하면 모든 규칙과 일치하지 않을 때 보여줄 not found 페이지도
구현할수 있다.

13.6.4 NavLink

NavLink는 Link 와 비슷함. 현재 경로와 Link 에서 사용하는 경로가
일치할 경우 특정 스타일 혹은 CSS 클래스를 적용할 수 있는 컴포넌트.
NavLink 에서 링크가 활성화 되었을 때의 스타일을 적용할 땐
activeStyle 값을, CSS 클래스를 적용할 땐 activeClassName 값을 props로.

Profiles 에서 사용하고 있는 컴포넌트 에서 Link 대신 NavLink 를 사용하게하고,
현재 선택되어 있으면 검정 배경에 흰색 글씨로 스타일 보여주게끔 코드수정.

13.7 정리

큰 규모의 프로젝트 진행하다보면 한가지 문제 발생.
바로 웹 브라우저에서 사용할 컴포넌트, 상태 관리 로직, 그외 여러 기능
구현하는 함수들이 점점 쌓이면서 최종 결과물인 JS 파일의 크기가 매우 커짐.

예를 들어 방금 만든 프로젝트는 사용자 /about 페이지에 들어올때 지금 당장
필요하지 않은 Profile 컴포넌트까지 불러온다.
라우트에 따라 필요한 컴포넌트만 불러오고, 다른 컴포넌트는
다른 페이지를 방문 할때 등의 필요한 시점에 불러오면 더 효율적.
이를 해결해주는게 바로 코드 스플리팅. 19장부터

14장 외부 API 연동하여 뉴스뷰어 만들기.

카테고리별로 최신 뉴스 목록 보여주는 뉴스 뷰어 만들기.

https://newsapi.org 에서 제공하는 API 사용해 데이터 받아오고,
9장에서 배운 styled-components 활용하여 프로젝트 스타일링.

-1) 비동기 작업의 이해
-2) axios로 API 호출해서 데이터 받아오기.
-3) newsapi API 키 발급받기
-4) 뉴스 뷰어 UI 만들기.
-5) 데이터 연동하기
-6) 카테고리 기능 구현하기.
-7) 리액트 라우터 적용하기.

14.1 비동기 작업의 이해.

웹 애플리케이션 만들다 보면 처리할때 시간이 걸리는 작업 존재.
예를 들어 웹 애플리케이션 에서 서버쪽 데이터가 필요할땐 Ajax 기법을 사용하여
서버의 API를 호출함 으로써 데이터를 수신.

이렇게 서버 API 사용할때는 네트워크 송수신 과정에서 시간이 걸리므로
작업이 즉시 처리되는게 아니라, 응답 받을때까지 기다렸다가 전달받은
응답 데이터를 처리. 이 과정에서 해당 작업은 비동기적으로 처리된다.

작업이 동기적으로 처리되면 요청이 끝날 때 까지 기다리는 동안
중지 상태가 되기 때문에 다른 작업 할수없다.
요청이 끝나야 그다음 예정된 작업이 진행된다.
하지만 이를 비동기적으로 처리하면, 웹 애플리케이션 이 멈추지 않기 때문에
동시에 여러 요청을 처리할 수도 있고, 기다리는 과정에서 다른 함수도 호출가능.

이렇게 서버 API 호출할때 외에도 작업을 비동기적으로 처리할 때도 있는데,
setTimeout 함수를 사용하여 특정작업 예약시 이다.


setTimeout 사용되는 시점에서 코드가 3초 동안 멈추는게 아니라,
일단 코드가 위부터 아래까지 다 호출되고 3초뒤 우리가 지정해준
함수가 호출된다.

JS에서 비동기 작업을 할때 가장 흔히 사용하는 방법은 콜백 함수 사용.
3초뒤에 호출되도록 함수 자체를 setTimeout 함수의 인자로 전달 해줬는데,
이런 함수를 콜백 함수라고 부른다.

14.1.1 콜백 함수.

여러번 순차적으로 처리하고 싶다면 콜백 함수를 중첩하여 구현.
콜백안에 또 콜백을 넣어서 구현 가능하지만, 너무 여러번 중첩되면
코드의 가독성이 나빠진다. 이런 형태를 '콜백 지옥' 이라고 부른다.
웬만하면 지양해라.

14.1.2 Promise

Promise 는 콜백 지옥같은 코드가 형성되지 않게 하는 방안으로 ES6에 도입.

함수를 여러번 감싸는것이 아닌 .then 을 사용해 그다음 작업으로 설정됨.

14.1.3 async/await

async/await 은 Promise 를 더욱 쉽게 사용하도록 해주는 ES8 문법.
이 문법 사용하려면 함수의 앞부분에 async 키워드를 추가하고,
해당 함수 내부에서 Promise 의 앞부분에 await 키워드 사용.
이렇게 하면 Promise 끝날때까지 기다린다음, 결과값을 특정 변수에 담는다.

14.2 axios로 API 호출해서 데이터 받기

axios 는 현재 가장 많이 사용되는 JS HTTP 클라이언트.
이 라이브러리의 특징은 HTTP 요청을 Promise 기반으로 처리.

App 예제에서 onClick 함수에는 axios.get 함수 사용.
이 함수는 파라미터로 전달된 주소에 get 요청.
이에 대한 결과 = .then 을 통해 비동기적 확인가능.

화살표 함수에 async / await 적용 할땐
async () => {} 와 같은 형식으로 적용.

newsapi API 키 발급받기

이번 프로젝트에선 newsapi 에서 제공하는 API 사용하여 최신 뉴스 불러오기.
사전에 newsapi 에서 API 키 발급 받아야 한다.
API 키는 https://newsapi.org/register 에 가입하면 발급가능.

내 키 : d2994b6a37f94808b18f80a0e79be828

발급 받은 API 키는 추후 API 요청시 API 주소의 쿼리 파라미터로 넣어 사용.

우리가 사용할 API.
https://newsapi.org/s/south-korea-news-api 링크에 들어가면
한국 뉴스를 가져오는 API에 대한 설명서 있음.

사용할 API 주소는 두가지 형태.

1. 전체 뉴스

GET https://newsapi.org/v2/top-headlines?country=kr&apiKey=d2994b6a37f94808b18f80a0e79be828

2. 특정 카테고리 뉴스 불러오기.

GET https://newsapi.org/v2/top-headlines?country=kr&category=business&apiKey=d2994b6a37f94808b18f80a0e79be828

여기서 카테고리는 제공하는것이면 아무거나 골라서 사용가능.
카테고리를 생략하면 모든 카테고리 뉴스를 불러온다.
apiKey 값에는 앞에서 받은 키값 넣기.

기존에 리액트 프로젝트에서 사용했던 가짜 API를 전체 뉴스를 불러오는 API로 대체하기.

14.4 뉴스 뷰어 UI 만들기

styled-components 사용하여 뉴스 정보 보여줄 컴포넌트 만들기.
NewsItem 은 각 뉴스 정보를 보여주는 컴포넌트.
NewsList 는 API를 요청하고 뉴스 데이터가 들어있는 배열을 컴포넌트 배열로
변환하여 렌더링 해 주는 컴포넌트.

14.4.1 NewsItem 만들기.

API로 받은 JSON 객체를 컴포넌트에 나타내기.
title, description, url, urlTolmage(뉴스이미지)

NewsItem 컴포넌트는 article 이라는 객체를 props 통쨰로 받아와 사용.

14.4.2 NewsList 만들기.

나중에 이 컴포넌트에서 API 를 요청하게 된다.
지금은 아직 데이터 불러오지 않고 있으니 sampleAriticle 이라는 객체에
미리 예시 데이터를 넣은후 각 컴포넌트에 전달하여 가짜내용 보이게 하자.

14.5 데이터 연동하기.

NewsList 컴포넌트 에서 이전에 연습 삼아 사용한 API 호출하기.
컴포넌트가 화면에 보이는 시점에 API 요청할것인데,
이때 useEffect 를 사용하여 컴포넌트가 처음 렌더링 되는 시점에
API 요청하면 된다.
여기서 주의할 점은 useEffect 에 등록하는 함수에 async 를 붙이면 안된다는것.
useEffect 에서 반환 하는 값은 뒷정리 함수 이기 때문.

따라서 useEffect 내부에서 async / await 를 사용하고 싶다면,
함수 내부에 async 키워드가 붙은 또 다른 함수 만들어서 사용해야함.

추가로 loading 이라는 상태도 관리하여 API 요청이 대기중인지 판별함.
요청 대기중일땐 loading 값이 true, 끝나면 값이 false 가 되어야한다.

**
데이터를 불러와서 뉴스 데이터 배열을 map 함수를 사용하여
컴포넌트 배열로 변환 할때 신경쓸 부분이 있다.
map 함수를 사용하기 전에 꼭 !articles 를 조회하여
해당 값이 현재 null 이 아닌지 검사해야 한다.

이 작업을 하지않으면, 아직 데이터가 없을때 null에는 map 함수가 없기
때문에 렌더링 과정에서 오류 발생.
그래서 애플리케이션이 제대로 나타나지 않고 흰페이지.

14.6 카테고리 기능 구현하기

뉴스의 카테고리 선택 기능 구현하기.
카테고리는 총 6개.
business
entertainment
health
science
sports
technology

화면에 카테고리 보여줄땐 영어 그대로 노출하지 않고, 한글로 보여준뒤
클릭했을땐 영어로된 카테고리 값이 되도록 구현.

14.6.1 카테고리 선택 UI 만들기.

카테고리 UI 렌더링 시킨후, App 에서 category 상태를 useState로 관리하자.
추가로 category 값을 업데이트 하는 onSelect 함수도 만들어주자.
category 와 onSelect 함수를 Categories, NewsList 컴포넌트에 
props 로 전달

Categories 에서는 props 로 전달받은 onSelect 를 
각 Category 컴포넌트의 onClick 으로 설정하고,
현재 선택된 카테고리 값에 따라 다른 스타일 적용하기.

14.6.2 API를 호출할때 카테고리 지정하기

지금은 뉴스 API 를 요청할때 따로 카테고리 선택하지 않고 뉴스 목록을 
불러오고 있다.
NewsList 컴포넌트 에서 현재 props 로 받아온 category 에 따라
카테고리를 지정하여 API 요청하도록 구현.

현재 category 값이 무엇인지에 따라 요청할 주소가 동적으로 바뀐다.
category 값이 all 이라면 query 값을 공백으로,
all 이 아니라면 "&category=카테고리" 형태의 문자열 만들도록함.
그리고 이 query 요청시 주소에 포함시켜 주었다.

추가로 category 값이 바뀔때 마다 뉴스를 새로 불러와야 하기 때문에
useEffect 의 의존 배열 ( 두번째 파라미터로 설정하는 배열 ) 에 
category 넣어 주어야 한다. (page refresh 조건)

14.7 리액트 라우터 적용하기

기존에는 useState로 카테고리 값 관리 했지만, 이번에는 이값을
리액트 라우터의 URL 파라미터를 사용하여 관리.

index.js 에서 리액트 라우터를 적용.

14.7.2 NewsPage 생성

이번에 리액트 라우터를 적용할 때 만들어야 할 페이지 단하나.

현재 선택된 category 값을 URL 파라미터를 통해 사용 할것 이므로
Categories 컴포넌트 에서 현재 선택된 카테고리 값을 알려줄 필요도 없고,
onSelect 함수를 따로 전달 할 필요도 없어진다.

14.7.3 Categories 에서 NavLink 사용하기.

이제 Categories 에서 onSelect 함수를 호출하여 카테고리 선택후,
선택된 카테고리에 다른 스타일을 주는 기능을 NavLink로 대체해 보자.
div, a , button, input 처럼 일반 HTMl 요소가 아닌
특정 컴포넌트에 styled-components 를 사용할땐 
styled(컴포넌트이름)``과 같은 형식 사용.

NavLink 로 만들어진 Category 컴포넌트에 to 값은 "/카테고리이름" 으로
설정해 주었다. 
그리고 카테고리중 전체보기의 경우는 예외적으로 "/all" 대신 "/" 으로설정.
to 값이 "/" 가리키고 있을땐 exact 값을 true 로 해줘야 한다.
이 값을 설정하지 않으면, 다른 카테고리가 선택 될때도 전체보기 링크에
active 스타일이 적용되버림.

14.8 usePromise 커스텀 Hook 만들기.

이번에는 컴포넌트 에서 API 호출처럼 Promise 사용해야하는 경우
더욱 간결하게 코드를 작성할 수 있도록 해주는 커스텀 Hook 을 만들어서
우리 프로젝트에 적용해 보자.

usePromise Hook은 Promise의 대기중, 완료결과, 실패결과 에 대한
상태를 관리하며, usePromise의 의존배열 deps 를 파라미터로 받아옴.
파라미터로 받아온 deps 배열은 usePromise 내부에서 사용한 
useEffect 의 의존 배열로 설정된다. 이 배열 설정 부분에서 ESLint 경고 나타남.
이 경고를 무시하려면 특정 줄에서만 ESLint 규칙을 무시하도록 주석 작성 해야함.
에디터에 경고줄 그어졌을때 그위에 커서 올리면 빠른수정... 이라는 문구 나타나는데,
이를 클릭하고 다음 한줄만 무시하기 클릭.

