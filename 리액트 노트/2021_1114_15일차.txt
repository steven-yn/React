23.5 posts API 에 회원 인증시스템 도입하기.
이번에는 기존에 구현했던 posts API 에 회원인증 시스템을 도입해 보겠습니다.
새 포스트는 이제 로그인 해야만 작성할수 있고, 삭제와 수정은 작성자만 할수 있도록 구현.

각각의 함수를 직접 수정해서 이 기능을 구현해도 되지만,여기선 미들웨어를 만들어서 관리.
또한, 각 포스트를 어떤 사용자가 작성했는지 알아야 하기 때문에
기존의 Post 스키마 수정.

23.5.1 스키마 수정하기 
스키마에 사용자 정보를 넣어 주자. 보통 MariaDB, PostgreSQL 같은
관계형 DB는 데이터의 id만 관계있는 데이터에 넣어주는 반면,
MongoDB 에서는 필요한 데이터를 통쨰로 집어넣음.

Post 스키마안에 user의 id와 username 전부 넣어줌.

23.5.2 posts 컬렉션 비우기

이제 post 데이터에는 사용자 정보가 필요해졋다.
우리가 이전에 DB에 생성한 데이터들은 더이상 유효하지 않으므로 모두 삭제.
Compass 를 열어서 좌측 컬렉션 리스트를 보면 posts 컬렉션 있음.
오른쪽에 휴지통 아이콘 눌러 삭제.

23.5.3 로그인 했을때만 API 를 사용할수 있게 하기.

checkLoggedIn 이라는 미들웨어 만들어서 로그인 해야만 
글쓰기, 수정, 삭제를 할수있도록 구현하기.
lib 디렉터리에 checkLoggedIn 파일을 생성하고 다음 미들웨어 작성.

이 미들웨어를 lib 디렉터리에 저장하는 이유는 다른 라우트에서도 사용될 가능성이 있음.
물론 이 프로젝트에서 auth 를 제외한 라우트는 posts 가 유일하기 때문에
auth.ctrl.js 에서 구현해도 상관없지만, 로그인 상태 확인 작업은
자주 사용하는 기능이므로 더 쉽게 재사용 하도록 lib 디렉터리에 작성하는것.

src/lib/checkLoggedIn.js

이 미들웨어는 로그인 상태가 아니라면 401 HTTP Status를 반환, 그렇지 않으면
그 다음 미들웨어들을 실행함.

이제 이 미들웨어를 posts 라우터 에서 사용.

23.5.4 포스트 작성시 사용자 정보 넣기.

로그인된 사용자만 포스트를 작성할수 있게 했으니, 지금부턴 포스트 작성시
사용자 정보를 넣어서 DB에 저장하도록 구현.

posts.ctrl.js 의 write 함수 수정.

Postman 으로 포스트 작성 API 요청하기.
조금전에 로그아웃 했다면, 다시로그인후 API 요청.

23.5.5 포스트 수정 및 삭제시 권한 확인 

마지막으로 작성자만 포스트를 수정하거나 삭제 할수 있도록 구현.
이 작업을 미들웨어 에서 처리하고 싶다면 id로 포스트를 조회하는 작업도
미들웨어로 해줘야 한다.
따라서 기존에 만든 checkObjectId 를 getPostById 로 바꾸고,
해당 미들웨어 에서 id로 포스트를 찾은 후 ctx.state에 담는다.

미들웨어 이름과 코드 수정한뒤 posts 라우터에도 반영.

read 함수내부에서 id로 포스트 찾는 코드 간소화.

getPostById 를 구현하고 적용했다면 이번엔 checkOwnPost
미들웨어 만들기.
이 미들웨어는 id로 찾은 포스트가 로그인 중인 사용자의 게시물 인지
확인해줌. 만약 사용자의 포스트가 아니라면 403 에러 발생.

MongoDB 에서 조회한 데이터의 id 값을 문자열과 비교할떈 
반드시 .toString() 을 해줘야함.

checkOwnPost 를 update 및 remove API 에 적용.
checkLoggedIn 다음 미들웨어로 등록.

postman 으로 새계정 만들고 그 계정으로 다른계정 포스트 삭제해보기.

23.6 username / tags 로 포스트 필터링하기

이번엔 특정 사용자가 작성한 포스트만 조회하거나 특정 태그가 있는
포스트만 조회하는 기능을 만들어 보자.

먼저 조금전에 새로 만든 계정으로 포스트 작성.
두명의 사용자가 쓴 포스트를 확인하고, 포스트 목록 조회 API 수정.

  const query = {
    ...(username ? { 'user.username': username } : {}),
    ...(tag ? { tags: tag } : {}),
  };
  
이 코드는 username 혹은 tag 값이 유효할때만 객체안에 해당값 넣겠다 의미.

잘못된 객체를 query로 사용하면 요청 받을때 username 이나 tag 값이
주어지지 않는다. 이경우엔 undefined 값이 들어가게된다.
mongoose 는 특정 필드가 undefined 인 데이터를 찾게되고,
결국 데이터 조회가 안된다.

코드 작성후 쿼리 파라미터를 URL에 포함시켜 요청.

23.7 정리 

이 장에서는 회원인증 시스템 구현하는 방법 알아보고,
기존의 포스트 관련 API 에 회원 인증 시스템을 도입.
도입 하는 과정에서 반복되는 코드는 대부분 미들웨어로 처리.
앞으로 Koa를 통해 백엔드 개발을 할땐 이렇게 미들웨어를 자주 만들어서
개발하는 방법을 추천. 이로써 코드의 가독성과 재사용성이 모두 
높아져서 유지 보수가 쉬워진다.

다음 장에선 실제 프로젝트 개발 흐름을 학습해 보자.


