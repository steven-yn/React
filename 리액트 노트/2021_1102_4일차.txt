
9장 컴포넌트 스타일링

컴포넌트를 스타일링 하는 방식은 다양하지만, 여러 방식중 딱히 정해진 방식이 없다.
회사마다 요구하는 스펙이 다르고, 개발자마다 각자 취향에 따라 선택.
어떤 방식이 있는지 알아보고, 자주 사용하는 방식을 하나하나 사용해보자.

일반 css : 스타일링의 가장 기본적인 방식.
Sass : 자주 사용되는 css 전처리기 ( pre-processor ) 중 하나.
		확장된 css 문법을 사용하여 css 코드를 더욱 쉽게 작성.
CSS Module : 스타일을 작성할 때 CSS 클래스가 다른 CSS 클래스의 이름과
			절대 충돌하지 않도록 파일마다 고유한 이름을 자동으로 생성해주는
			옵션.
			
styled-components : 스타일을 JS 파일에 내장 시키는 방식.

CSS를 작성할때 가장 중요한 점은 CSS 클래스를 중복되지 않게 만드는 것.
css 클래스가 중복 되는것을 방지하는 여러가지 방식이 있는데,
그중 하나는 이름 지을때 특별한 규칙 (rule)을 사용하여 짓는것이고
다른 하나는 css Selectior 를 활용하는 것.

9.2.1 utils 함수 분리

여러 파일에서 사용될수 있는 Sass 변수 및 믹스인은 다른 파일로 따로 분리 작성.
필요한 곳에서 쉽게 불러와 사용.

styles 디렉터리 생성, 그안에 utils.scss 파일.
변수와 믹스인을 잘라내서 이동시키기.

9.2.2 sass-loader 설정 커스터마이징하기
Sass를 사용할때 반드시 해야하는것은 아니지만, 해두면 유용.
디렉터리가 많아서 구조가 깊어졌다면, 상위 폴더로 한참 거슬러 올라가야함.
이 문제점은 웹팩에서 Sass를 처리하는 sass-loader의 설정을 커스터마이징 하여 해결.

create-react-app 으로 만든 프로젝트는 프로젝트 구조의 복잡도를 낮추기위해
세부 설정이 모두 숨겨져 있다.
이를 커스터마이징 하려면 프로젝트 디렉터리 에서 yarn eject 명령어를 통해
세부설정을 밖으로 꺼내준다.

yarn eject는 아직 Git에 커밋되지 않은 변화가 있다면 진행되지 않는다.

Git 에 커밋하기.
https://evols-atirev.tistory.com/14

yarn eject 실행후 webpack.config.js 열기.
"sassRegex" 키워드 찾기
use: 밑에 'sass-loader' 지우고 .concat,,, 내용 집어넣기
설정 파일 저장후, 서버를 껐다가 재시작
@import 'utils.scss'; 로 경로 없이 사용가능.

새파일 생성시마다 매번 포함 시키기 힘드므로,
sass-loader의 additionalData 옵션 설정하기.
additionalData 는 sass 파일을 불러올 때 마다 코드 맨윗부분에 특정 코드를 포함시켜줌.

{
              test: sassRegex,
              exclude: sassModuleRegex,
              use: getStyleLoaders({
                importLoaders: 3,
                sourceMap: isEnvProduction
                  ? shouldUseSourceMap
                  : isEnvDevelopment,
              }).concat({
                loader: require.resolve("sass-loader"),
                options: {
                  sassOptions: {
                    includePaths: [paths.appSrc + "/styles"],
                  },
                  additionalData: `@import 'utils';`,
                },
              }),
              // Don't consider CSS imports dead code even if the
              // containing package claims to have no side effects.
              // Remove this when webpack adds a warning or an error for this.
              // See https://github.com/webpack/webpack/issues/6571
              sideEffects: true,
            },
			
이후 개발서버 재시작하고나면 모든 scss에서 utils.scss를 자동으로 불러옴.
sass 맨윗줄 import를 지워도 정상적으로 작동됨.

9.2.3 node_modules 에서 라이브러리 불러오기
Sass의 장점중 하나는 라이브러리를 쉽게 불러와서 사용할수 있다.
yarn을 통해 설치한 라이브러리를 사용하는 방법?
상대경로를 사용하여 node_modules 까지 들어가서 불러오는 방법이 기본적.
@import '../../../node_modules/library/styles';

하지만 깊숙한 디렉터리에서는 번거롭다. 더쉬운방법은
@import '~library/styles'; 이렇게 사용.

물결 문자를 사용하면 자동으로 node_modules 에서 라이브러리 디렉터리를 탐지하여
스타일을 불러올 수 있습니다.

Sass 라이브러리 두가지를 설치하고 사용해 보자

반응형 디자인을 쉽게 만들어 주는 include-media (https://include-media.com/)
매우 편리한 색상 팔레트 open-color(https://www.npmjs.com/package/open-color)

sass 라이브러리를 불러올 때는 node_modules 내부 라이브러리 경로 안에 들어있는
scss 파일을 불러와야함.
보통 scss 파일 경로가 어디에 위치하고 있는지를 라이브러리의 공식 매뉴얼에서
알려주지 않을 때가 많으니, 직접 경로로 들어가자.

include-media, open-color 사용하기.

SassComponent의 배경색을 open-color 팔레트 라이브러리에서 불러온후 설정,
화면 가로 크기가 768px 미만이 되면 배경을 어둡게

9.3 CSS Module

CSS Module은 CSS를 불러와서 사용할때 클래스 이름을 고유한 값,
[파일 이름]_[클래스 이름]_[해시값] 형태로 자동으로 만들어서 
컴포넌트 스타일 클래스 이름이 중첩되는 현상을 방지해 주는 기술.
CSS Module을 사용하기 위해 구버전(v1)의 create-react-app 에서는
웹팩에서 css-loader 설정을 별도로 해주어야 하지만,
v2 버전 이상부턴 따로 설정 없이 .module.css 확장자로 파일을 저장하기만하면
css module 이 적용됩니다.

CSSModule.module.css

CSS Module 을 사용하면 클래스 이름 지을때 그 고유성에 대해 고민 X
흔히 사용하는 단어로 이름을 짓는다고 해도 전혀 문제 X
해당 클래스는 우리가 방금 만든 스타일을 직접 불러온 컴포넌트 내부에서만 작동.

만약 특정 클래스가 웹 페이지에서 전역적으로 사용되는 경우라면 :global 앞에 입력하여
글로벌 CSS 임을 명시해 줄수 있습니다.

CSS Module 이 적용된 스타일 파일을 불러오면 객체를 하나 전달받게됨.
CSS Module 에서 사용한 클래스 이름과 해당 이름을 고유화한 키-값 형태를 받음.
예를 들어 console.log(styles)를 한다면 다음과 같은 결과.
{ wrapper: "CSSModule_wrapper__1SbdQ" }

지정한 클래스 이름 앞뒤로 파일이름, 해시값 붙음.

이 고유한 클래스 이름 사용하려면 클래스 적용할 JSX 엘리먼트에 
className={styles.[클래스이름]} 형태로 전달 해주면됨.
:global을 사용하여 전역적으로 선언한 클래스의 경우 평상시 해왔던 것처럼
그냥 문자열로 넣어줌.

CSS Module을 사용한 클래스 이름을 두개 이상 적용할때?
<div className={`${styles.wrapper} ${styles.inverted}`}>

ES6 문법인 Template Literal 을 사용하여 문자열 합함.
이 문법 사용하면 문자열 안에 자바스크립트 레퍼런스 쉽게 넣어줄수 있다.
`문자열 ${styleClass} 문자열`

CSSModule 클래스를 여러개 사용할때 템플릿 리터럴 문법을 사용하고 싶지 않다면 ?
<div className={[styles.wrapper, styles.inverted].join(' ')}>
== <div className={`${styles.wrapper} ${styles.inverted}`}>

9.3.1 classnames

classnames는 CSS 클래스를 조건부로 설정할때 유용한 라이브러리

CSS Module 을 사용할때 이 라이브러리 사용하면 여러 클래스 적용할때 매우편리.
파라미터를 조합해 CSS 클래스 설정 가능.
컴포넌트에서 조건부로 클래스를 설정할때 매우 편해짐.
예를 들어 props 값에 따른 스타일 주기가 쉬워진다

css 클래스상에서 조건을 걸어 놓기 때문에
컴포넌트에서 true나 false 를 받는 것으로 스타일을 조건부로 나타내기 쉬워진다.
-> 쓰지않는다면 컴포넌트에서 조건 연산자를 사용해야함 ? []:[]

CSS Module 도 사용이 훨씬 쉬워진다.
classnames 에 내장 되어있는 bind 함수를 사용하면 클래스를 넣어 줄때마다
styles.[클래스이름] 형태를 사용할 필요가 없다.
사전에 미리 styles 에서 받아온후 사용하게끔 설정후
cx('클래스이름', '클래스이름2') 형태로 사용할수 있다.

9.3.2 Sass 와 함께 사용하기

Sass를 사용할 때도 파일 이름 뒤에 .module.scss 확장자를 사용해주면
CSS Module 로 사용할 수 있습니다.

9.3.3 CSS Module이 아닌 파일에서 CSS Module 사용.

CSS Module 이 아닌 일반 .css / .scss 파일에서도
:local 을 사용하여 CSS Module 사용가능.

9.4 styled-components

컴포넌트 스타일링의 또 다른 패러다임은 자바스크립트 안에 스타일을 선언하는 방식.
이 방식을 'CSS-in-JS' 라고 불름.
https://github.com/MicheleBertoil/css-in-js 에서 확인.

이 절에서는 개발자들이 가장 선호하는 styled-components 알아보자.
이것을 사용하면 JS 파일 하나에 스타일까지 작성할수 있기 때문에
.css 또는 .scss 확장자를 가진 스타일파일을 따로 만들지 않아도 된다는 큰이점.

styled-components 라이브러리의 문법이 바뀐것 같으므로 패스.

10장 일정관리 웹 애플리케이션 만들기

이 장에서는 지금까지 배운 지식을 활용하여 일정관리 애플리케이션 만들기.

-1. 프로젝트 준비하기
-2. UI 구성하기
-3. 기능구현하기

sass 사용, classnames 는 조건부 스타일링을 좀더 편하게.
react-icons 는 다양하고 이쁜 아이콘을 사용할수 있는 라이브러리.
https://react-icons.netlify.com/ 에서 아이콘 리스트와 사용법 확인.

이 라이브러리 장점은 SVG 형태로 이루어진 아이콘을 리액트 컴포넌트처럼 매우쉽게 사용.
아이콘 크기나 색상은 props 혹은 css 스타일로 변경하여 사용.

10.1.2 Prettier 설정.

Prettier를 설정하여 코드를 작성할때 코드 스타일을 깔끔하게 정리.

10.2 UI 구성하기.

앞으로 만들 컴포넌트 들의 용도?
TodoTemplate : 화면을 가운데에 정렬시켜 주며, 앱 타이틀 (일정관리) 을 보여줍니다.
children 으로 내부 jsx 를 props로 받아와서 렌더링.

TodoInsert : 새로운 항목을 입력하고 추가할 수 있는 컴포넌트.
state를 통해 인풋의 상태 관리.

TodoListItem: 각 할일 항목에 대한 정보를 보여주는 컴포넌트.
todo 객체를 props 로 받아와서 상태에 따라 다른 스타일의 UI 보여줌.

TodoList: todos 배열을 props로 받아온 후, 이를 배열 내장함수 map을 사용.
여러개의 TodoListItem 컴포넌트로 변환하여 보여줌.

src 디렉터리에 components 라는 디렉터리를 생성하여 그안에 저장.
컴포넌트 파일을 components 디렉터리에 넣는 이유는 기능이나 구조상 필요하기 때문이
아니라, 자주 사용되는 관습이다.

모양새를 갖추는 데 집중.

10.2.1 TodoTemplate 만들기

display: flex 에 더 자세히?
Flexbox Froggy ( https://flexboxfroggy.com/#ko)

10.2.2 TodoInsert 만들기

TodoInsert.js 에서 처음으로 react-icons 를 사용.

https://react-icons.netlify.com/#/icons/md 페이지에 들어가면
수많은 아이콘과 이름이 함께 나타난다.
여기서 사용하고 싶은 아이콘을 고른다음, import 구문을 사용하여 불러온후
컴포넌트처럼 사용.

import { 아이콘이름 } from 'react-icons/md';
==> import { MdAdd } from 'react-icons/md';

10.2.3 TodoListItem 과 TodoList 만들기.

일정 관리 항목이 보일 TodoListItem 컴포넌트부터 작업.

10.3 기능 구현하기

10.3.1 App 에서 todos 상태 사용하기.

나중에 추가할 일정 항목에 대한 상태들은 모두 App 컴포넌트 에서 관리.
App에서 useState를 사용하여 todos 라는 상태를 정의하고,
todos를 TodoList의 props로 전달.

todos 배열안에 들어있는 객체에는 각항목의 고유 id, 완료 여부를 알려주는 값 포함.
이 배열은 TodoList에 props로 전달. TodoList 에서 이 값을 받아 온후
TodoItem 으로 변환하여 렌더링 하도록 설정해야함.

props로 받아온 todos 배열을 map을 통해 
TodoListItem 으로 이루어진 배열로 변환하여 렌더링.
map을 사용하여 컴포넌트 변환시 key props 를 전달해 줘야한다.
여기서 사용되는 고유값은 id, todo 데이터는 통째로 props로 전달.
*여러 종류 값을 전달하는 경우에는 객체 통채로 전달하는 편이 성능 최적화시 편리.

이제 TodoListItem 컴포넌트에서 받아온 todo 값에 따라
제대로 된 UI를 보여줄수 있도록 컴포넌트 수정.
조건부 스타일을 위해 classnames 사용.

App에서 전달해준 todos 값에 따라 다른 내용을 보여준다.

10.3.2 항목 추가 기능 구현하기

일정 항목 추가하는 기능 구현.

TodoInsert 컴포넌트 에서 인풋 상태를 관리하고 App 컴포넌트에는 todos 배열에
새로운 객체를 추가하는 함수를 만들어 주어야 합니다.

10.3.2.1 TodoInsert value 상태 관리하기

TodoInsert 컴포넌트 에서 인풋 입력값을 관리 할수 있도록
useState를 사용하여 value 라는 상태를 정의 하자.
이 과정에서 컴포넌트가 리렌더링 될 때 마다 함수를 새로 만드는것이 아닌,
한번 함수를 만들고 재사용 할수 있도록 useCallback Hook 사용.

인풋에 value와 onChange를 설정하지 않아도 입력할수 있다.
이런경우 현재 state 가 잘 업데이트 되는가 확인 하려면? console.log 외에
리액트 개발자 도구 ( React Developer Tools )

10.3.2.3 todos 배열에 새 객체 추가하기

(일정을 추가할수 있는 기능 구현)
이번에는 App 컴포넌트에서 todos 배열에 새객체 추가하는 onInsert 함수.
onInsert 함수는 새로운 객체를 만들 때 마다 id 값에 1 씩 더해주어야한다.
id 값은 useRef를 사용하여 관리.
useState가 아닌 useRef를 사용하는 이유?
id 값은 렌더링 되는 정보가 아니기 때문.
이 값은 화면에 보이지도 않고, 이값이 바뀐다고해서 컴포넌트가 리렌더링 될 필요도 없다.
단순히 새 항목 만들때 참조되는 값.

또한 onInsert 함수는 컴포넌트의 성능을 아낄 수 있도록 useCallback으로 감싼다.
props로 전달할 함수를 만들땐 useCallback을 사용하여 함수를 감싸는 습관 들이기.

10.3.2.4 TodoInsert에서 onSubmit 이벤트 설정.

버튼을 클릭하면 발생할 이벤트 설정.
App에서 TodoInsert에 넣어 준 onInsert 함수에 현재 useState를 통해
관리하고 있는 value 값을 파라미터로 넣어 호출.

onSubmit 함수 만들고, 이를 form의 onSubmit 으로 설정.
이 함수가 호출되면 props 로 받은 onInsert 함수에 현재 value 값을
파라미터로 넣어 호출하고, 현재 value 초기화. 
( buttom 클릭 -> Submit 됨 -> 내용만 초기화 )

클릭 이벤트만으로도 처리할수 있지만, onSubmit 사용이유?
onSubmit 이벤트 경우 인풋에서 Enter를 눌러도 발생.
onClick 은 이를 구현하기위한 onKeyPress 이벤트를 통해 로직을 따로 작성해야함.

10.3.3 지우기 기능 구현

filter 를 사용하면 배열 불변성 지키며 배열 원소 제거가 간편.

10.3.3.1 filter
기존의 배열은 그대로 둔 상태에서 특정 조건을 만족하는 원소들만 따로 추출하여
새로운 배열 만들어줌.

array.filter(조건용 변수 => 조건용 변수 > 5 );
==> 5보다 큰 수만 따로 배열 만들어준다. [6,7,8...]

filter 함수에는 조건을 확인해 주는 함수를 파라미터로 넣어 주어야한다.
파라미터로 넣는 함수는 true 혹은 false 값을 반환하며,
true를 반환하는 겨우만 새로운 배열에 포함.

10.3.3.2 todos 배열에서 id로 항목 지우기.

filter 함수를 사용하여 onRemove 함수를 작성.
App 컴포넌트에 id를 파라미터로 받아와서 같은 id 가진 항목을 todos 배열에서 지우는 함수.
이함수를 만들고 나서 TodoList의 props로 설정함. 

10.3.3.3 TodoListItem 에서 삭제함수 호출하기.

TodoListItem 에서 방금 만든 onRemove 함수 사용하려면 우선
TodoList 컴포넌트 거치기. 다음과 같이 props로 받아온 onRemove 함수를
TodoListItem 에 그대로 전달. 
( TodoListItem 을 TodoList 에서 import 하고 호출하기 때문인듯 )

10.3.4 수정기능

수정 기능도 방금 만든 삭제 기능과 비슷.
onToggle 이라는 함수를 App 에서 만들고, 해당 함수를 TodoList 컴포넌트에
props로 넣어주기. TodoList를 통해 TodoListItem 까지 전달.

onToggle 에서는 map을 사용하여 특정 id를 가진 객체의 checked 값을
반전 시켜줌.
불변성을 유지하면서 특정 배열 원소만을 업데이트 해야할때
이런식으로 map을 사용하면 짧은 코드로 쉽게 작성가능.

map 사용된 이유에 대해 이해하기 힘들수도 있다.
map 함수는 배열을 전체적으로 새로운 형태로 변환하여
새로운 배열을 생성해야 할때 사용한다고 배웠다.
지금은 딱 하나의 원소만 수정하는데 왜 map 사용?

onToggle 함수를 보면 todo.id === id ? ... : ... 이라는 삼항 연산자가 사용됨.
todo.id 와 현재 파라미터로 사용된 id 값이 같을때 : 새로운 객체 생성.
id 값이 다를때 : 변화 X 처음 받아온 상태 그대로 반환.
그렇기 때문에 map을 사용하여 만든 배열에서 변화가 필요한 것만 업데이트되고
나머지는 그대로. ( 결국에 배열형태로 반환해야하니 map을 사용하는것이 당연함 )

10.3.4.2 TodoListItem 에서 토글함수 호출.

11장 컴포넌트 성능 최적화.

데이터가 무수히 많아지면, 애플리케이션 이 느려지는것을 체감할수 있을정도로 지연발생.
이번 실습 진행 순서

-1. 많은 데이터 렌더링 하기
-2. 크롬 개발자 도구를 통한 성능 모니터링
-3. React.memo 를 통한 컴포넌트 리렌더링 성능 최적화
-4. onToggle 과 onRemove 가 새로워지는 현상 방지.
-5. react-virtualized 를 사용한 렌더링 최적화.

11.1 많은 데이터 렌더링 하기.
우선 랙(lag) 을 경험할수 있도록 많은 데이터 렌더링 시도.
createBulkTodos 라는 함수를 만들어 2500개의 데이터 자동생성.
주의점은 useState 의 기본값에 함수를 넣은것.
여기서 useState(createBulkTodos) 처럼 파라미터를 함수 형태로 넣어주면
컴포넌트가 처음 렌더링 될 때만 createBulkTodos 함수가 실행된다.

11.2 React DevTools 를 사용한 성능 모니터링

성능을 분석해야 할때는 느낌만으로 충분하지 않다.
정확히 몇초가 걸리는지 확인해야 하는데, 이는 React DevTools를 사용하여 측정.
리액트 v17 전에는 브라우저에 내장된 성능 측정 도구의 User Timing API를 사용.
리액트 개발자 도구의 Components 탭 -> Profiler 탭
이 탭을 열면 좌측 상단에 파란색 녹화 버튼 보인다.

상단 녹화 시작 -> 체크박스클릭 -> 녹화 중단.

Render duration : 리렌더링 소요시간
랭크 차트 아이콘 누르면 각 컴포넌트가 리렌더링 오래 걸린순으로 정렬하여 나열.

11.3 느려지는 원인 분석.

리렌더링이 발생하는 상황

1. 자신이 전달받은 props 변경될때
2. 자신의 state가 바뀔때
3. 부모 컴포넌트가 리렌더링 될 때
4. forceUpdate 함수가 실행될때

현재 '할일 1' 항목을 체크할 경우 
App 컴포넌트의 state가 변경되면서 App 컴포넌트가 리렌더링됨.
부모 컴포넌트가 리렌더링 되었으니 TodoList 컴포넌트가 리렌더링 되고
그안의 무수한 컴포넌트 들도 리렌더링 된다.

'할일 1' 항목은 리렌더링 되어야 하는것이 맞지만, 
'할일 2' 부터 '할일 2500' 까지는 리렌더링을 안해도 되는 상황인데
모두 리렌더링 되고 있는 것이다.

컴포넌트 개수가 많지 않다면 괜찮지만, 지금처럼 2000개 정도가 넘어가면 성능 저하.

이럴때는 리렌더링 성능 최적화 작업 해줘야함.
즉, 리렌더링이 불필요할때는 리렌더링을 방지 해줘야 함.

11.4 React.memo 사용하여 최적화.

컴포넌트 리렌더링 방지시 7장에서 배운 shouldComponentUpdate 라는 
라이프사이클 메서드 사용했지만, 함수형에서는 React.memo 를 대신 사용.
컴포넌트의 props 가 바뀌지 않았다면, 리렌더링 하지 않도록 설정하여 
함수 컴포넌트의 리렌더링 성능 최적화 해줌.

React.memo의 사용법은 매우 간단. 컴포넌트 만들고나서 감싸주기만 한다.
TodoListItem 컴포넌트는 todo, onRemove, onToggle 이 바뀌지 않으면
리렌더링 하지않음.

11.5 onToggle, onRemove 함수 바뀌지 않게 하기

React.memo 사용만 해서는 끝나지않음.
현재 프로젝트 에서는 todos 배열이 업데이트 되면, onRemove 와 onToggle
함수도 새롭게 바뀐다.
onRemove 와 onToggle 는 배열 상태를 업데이트 하는 과정에서
최신 상태의 todos를 참조.
todos 배열이 바뀔 때 마다 함수가 새로 만들어짐.
이렇게 함수가 계속 만들어지는 상황을 방지하는 방법은 두가지.
첫 번째 방법은 useState의 함수형 업데이트 기능 사용.
두 번째 방법은 useReducer 사용.

11.5.1 useState의 함수형 업데이트

기존 setTodos 함수 사용할땐 새로운 상태를 파라미터로 넣어줌.
setTodos를 사용할때 새로운 상태를 파라미터로 넣는대신,
상태 업데이트를 어떻게 할지 정의하는 업데이트 함수를 넣을 수도 있다.
이를 '함수형 업데이트' 라고한다.

setNumber(number+1) 을 하는게 아니라,
어떻게 업데이트 할지 정의하는 업데이트 함수 넣어줌.
useCallback 시 두번째 파라미터로 넣는 배열에 number 넣지 않아도 됨.

onToggle onRemove 에서 사용해보자. onInsert도 함께.

setTodos 를 사용할때 그안에 todos => 만 넣고, callback 경우 배열 비우기.

리액트 개발자 도구 Profiler 에서 회색 빗금 박스는 리렌더링 되지 않은 컴포넌트.
실제로 딱 필요한것만 리렌더링됨.

11.5.2 부터 하면됨 useReducer!